name: Code Quality Check

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        go get -v -t -d ./...
        go install golang.org/x/lint/golint@latest
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
        go install github.com/tebeka/go2xunit@latest

    - name: Run tests and generate coverage
      run: |
        go test -v -coverprofile=coverage.out ./... || echo "Tests failed"
        go tool cover -func=coverage.out
        gocov convert coverage.out | gocov-xml > coverage.xml

    - name: Run golint
      run: golint ./... > golint-report.txt || echo "Golint found issues"

    - name: Run go vet
      run: go vet ./... 2> govet-report.txt || echo "Go vet found issues"

    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "Test coverage is below 80%"
          echo "Current coverage: $COVERAGE%"
        else
          echo "Coverage is sufficient: $COVERAGE%"
        fi

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

    - name: Upload golint report
      uses: actions/upload-artifact@v4
      with:
        name: golint-report
        path: golint-report.txt

    - name: Upload go vet report
      uses: actions/upload-artifact@v4
      with:
        name: govet-report
        path: govet-report.txt

    - name: Check for code smells
      run: |
        if [ -s golint-report.txt ]; then
          echo "Golint found issues:"
          cat golint-report.txt
        else
          echo "No golint issues found"
        fi
        if [ -s govet-report.txt ]; then
          echo "Go vet found issues:"
          cat govet-report.txt
        else
          echo "No go vet issues found"
        fi

    - name: Summarize results
      run: |
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: $(go tool cover -func=coverage.out | grep total | awk '{print $3}')" >> $GITHUB_STEP_SUMMARY
        echo "- Golint issues: $(wc -l < golint-report.txt)" >> $GITHUB_STEP_SUMMARY
        echo "- Go vet issues: $(wc -l < govet-report.txt)" >> $GITHUB_STEP_SUMMARY
